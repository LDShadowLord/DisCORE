import dhooks

discore_version = "0.2.1"

class Logs:
    def __init__(self, url=None):
        """
        Create a Discord Logs Item
        The 'url' attribute is for a Discord "logs" channel
        """

        if url==None:
            raise ValueError("No URL was provided")
        self.url = url
        self.hook = dhooks.Webhook(url)
        self.log_output = []
        self.debug = False

    def debug(self, state=None):
        """
        Toggles Debug Mode - Prevents unnecessary printing
        Returns the debug state when called.
        The 'state' argument can change the Debug State.
        """

        if state != None:
            if state == True:
                self.debug = True
            else:
                self.debug = False

        return self.debug
        
    def print(self, content="", debug=False):
        """
        Print contents to screen and to Discord
        The 'debug' attribute can be used to prevent printing
        """

        if debug != self.debug:
            pass
        else:
            content = str(content)
            print(content)
            self.log_output.append(content)
        
    def commit(self, clear=True):
        """
        Commit logs to Discord
        The 'clear' attribute empties the previous logs upon commit
        """
        ready_to_output = ""
        for line in self.log_output:
            if len(line)+len(ready_to_output) > 1950:
                self.hook.send(content="```"+ready_to_output+"```")
                ready_to_output = "" + line + "\n"

            else:
                ready_to_output = ready_to_output + line + "\n"

        self.hook.send(content="```"+ready_to_output+"```")    
        if clear:
            self.log_output = []

class Notify:
    def __init__(self, url=None, debug=False):
        """
        Create a Discord Notify Item
        The 'url' attribute is for the Discord "notification" channel
        The 'debug' attribute is to test code without spamming Discord
        """

        if url==None:
            raise ValueError("No URL was provided")
        self.url = url
        self.hook = dhooks.Webhook(url)
        self.debug = debug

    def author(self):
        """
        Returns an example dictionary formatted for use with the embed function.
        Use this dictionary to add an author to an embed
        """
        authorDict = {
            "name":"",
            "icon":"",
            "url":""
        }
        return authorDict

    def embed(self, description, title, url=None, color=0x7289da, thumbnail=None, image=None, author=None, removeFooter=False):
        """
        Create a Discord Embed
        The 'description' attribute is for the main text of the embed
        The 'title' attribute is for the bolded, linkable, text of the embed
        The 'url' attribute is for the target of the title link
        The 'color' attribute is for the embed edge colour
        The 'thumbnail' attribute is for the image URL of the thumbnail
        The 'image' attribute is for the image URL of the main image
        The 'author' attribute is for a dictionary of author attributes
        """
        if url == None:
            exportEmbed = dhooks.Embed(
                description = description,
                title = title,
                color = color
            )
        else:
            exportEmbed = dhooks.Embed(
                description = description,
                title = title,
                color = color
            )

        if thumbnail != None:
            exportEmbed.set_thumbnail(thumbnail)

        if image != None:
            exportEmbed.set_image(image)

        if author != None:
            exportEmbed.set_author(author["name"],author["icon"],author["url"])

        if removeFooter == True:
            return exportEmbed
        else:
            exportEmbed.set_footer("Generated by DisCORE "+discore_version, )

    def notify(self, embed):